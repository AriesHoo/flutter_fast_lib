def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
import java.text.SimpleDateFormat

//获取时间的方法-只获取到分钟
static def getNowTime() {
    return new SimpleDateFormat("MM-dd HH_mm", Locale.CHINA).format(new Date());
}

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
//        minSdkVersion flutter.minSdkVersion
        minSdkVersion 19
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
        //正式包名
//        applicationId "com.blood.belfry"
        //正式环境Manifest配置参数
//        manifestPlaceholders = [
//                APP_NAME     : "评估量表",//应用名称
//                JPUSH_PKGNAME: applicationId,
//                JPUSH_APPKEY : "xxxx", // NOTE: JPush 上注册的包名对应的 Appkey.
//                JPUSH_CHANNEL: "BloodBelfry", //暂时填写默认值即可.
//        ]
        //测试包名
        applicationId "com.blood.belfry.test"
        //测试环境Manifest配置参数
        manifestPlaceholders = [
                APP_NAME     : "评估量表Test",//应用名称
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "xxxxx", // NOTE: JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "BloodBelfryTest", //暂时填写默认值即可.
        ]
    }
    //配置签名
    signingConfigs {
        release {
            keyAlias 'bloodBelfry'
            storeFile file('../bloodBelfry')
            storePassword 'bloodBelfry123#@!'
            keyPassword 'bloodBelfry123#@!'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            zipAlignEnabled true //是否支持Zip Align
            shrinkResources true //是否清理无用资源
            minifyEnabled true //是否启动混淆
            //读取代码压缩配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            zipAlignEnabled true //是否支持Zip Align
            shrinkResources true //是否清理无用资源
            minifyEnabled true //是否启动混淆
            //读取代码压缩配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                // 设置支持的SO库架构
//                abiFilters 'armeabi-v7a', 'arm64-v8a'//,'x86' ,'armeabi', 'x86_64', 'arm64-v8a'
            }
        }
    }
//    打包输出配置
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.name == "release") {
                outputFileName = "${defaultConfig.manifestPlaceholders.APP_NAME}V${defaultConfig.versionName}_${defaultConfig.versionCode}.apk"
                return
            }
            outputFileName = "${defaultConfig.manifestPlaceholders.APP_NAME}_v${defaultConfig.versionName}_code_${defaultConfig.versionCode}_time_${getNowTime()}_${variant.name}.apk"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
